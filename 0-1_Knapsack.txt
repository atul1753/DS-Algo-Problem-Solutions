
# 0-1 Knapsack
# Take the elem or leave it. If curr wt > W, then go to next ind
# Recursive

class Solution
{
    public:
    //Function to return max value that can be put in knapsack of capacity W.
    int find(int w, int wt[],int val[],int n,int ind)
    {
        if(w<=0 || ind>=n)
            return 0;
        // if(find(w-wt[ind]))
        return(max(val[ind]+find(w-wt[ind],wt,val,n,ind+1),find(w,wt,val,n,ind+1)));
    }
    int knapSack(int W, int wt[], int val[], int n) 
    { 
        return(find(W,wt,val,n,0));
    }
};

# Memoization

class Solution
{
    public:
    //Function to return max value that can be put in knapsack of capacity W.
    int find(int w, int wt[],int val[],int n,int ind,int** dp)
    {
        if(ind==n)
            return 0;
        if(dp[ind][w]!=-1)
            {
                return dp[ind][w];
            }
        if(wt[ind]>w)
            return(dp[ind][w]=find(w,wt,val,n,ind+1,dp));
        return(dp[ind][w]=max(val[ind]+find(w-wt[ind],wt,val,n,ind+1,dp),find(w,wt,val,n,ind+1,dp)));
    }
    int knapSack(int W, int wt[], int val[], int n) 
    { 
        int** dp;
    dp = new int*[n];
 
    // loop to create the table dynamically
    for (int i = 0; i < n; i++)
        dp[i] = new int[W + 1];
 
    // loop to initially filled the
    // table with -1
    for (int i = 0; i < n; i++)
        for (int j = 0; j < W + 1; j++)
            dp[i][j] = -1;
        return(find(W,wt,val,n,0,dp));
    }
};