
# Diameter of binary tree -> https://leetcode.com/problems/diameter-of-binary-tree/
# Here diameter includes number of edges not nodes;
# Recursively calculate ld,rd,lh,rh at each level and take max of ld,rd, lh+rh.

class Solution {
public:
    int height(TreeNode*root){
        if(!root)
            return 0;
        return(1+max(height(root->left),height(root->right)));
    }
    int solve(TreeNode*root){
        if(!root)
            return 0;
        int ld=solve(root->left);
        int rd=solve(root->right);
        int lh=height(root->left);
        int rh=height(root->right);
        return(max({ld,rd,lh+rh}));
    }
    int diameterOfBinaryTree(TreeNode* root) {
        return(solve(root));
    }
};

# If diamater means number of nodes then just do 1+max(ld,rd),1+lh,rh