# Job Sequencing Problem -> https://practice.geeksforgeeks.org/problems/job-sequencing-problem-1587115620/1#
# Logic is to sort the array in descending order of profits and do them on the last day of thetir deadline. For this, maintain a flag array.
# If the position is occupied, then keep on going back till you find -1, else it can't be done.


bool static compare(Job job1,Job job2){
        return(job1.profit>job2.profit);
    }
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        sort(arr,arr+n,compare);
        int ans=0,job=0;
        int ind=INT_MIN;
        for(int i=0;i<n;i++)
            ind=max(ind,arr[i].dead);
        int flag[ind+1];
        for(int i=0;i<=ind+1;i++)
            flag[i]=-1;
        vector<int>res;
        for(int i=0;i<n;i++){
            for(int j=arr[i].dead;j>0;j--)
             {
                 if(flag[j]==-1)
                 {
                     ans+=arr[i].profit;
                     flag[j]=arr[i].id;
                     job++;
                     break;
                 }
             }
        }
        res.push_back(job);
        res.push_back(ans);
        return res;
    }