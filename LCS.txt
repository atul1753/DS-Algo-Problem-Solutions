
# LCS

class Solution {
public:
    int find(string text1,string text2,int m,int n){
        if(m==0 || n==0)
            return 0;
        if(text1[m-1]==text2[n-1]){
            return(1+find(text1,text2,m-1,n-1));
        }
        return(max(find(text1,text2,m,n-1),find(text1,text2,m-1,n)));
    }
    int longestCommonSubsequence(string text1, string text2) {
        int m=text1.length();
        int n=text2.length();
        return(find(text1,text2,m,n));
    }
};

class Solution {
public:
    int find(string text1,string text2,int m,int n,vector<vector<int>>& dp){
        if(m<=0 || n<=0)
            return 0;
        if(dp[m][n]!=-1)
        {
            cout<<m<<" "<<n<<endl;
            return dp[m][n];
        }
        if(text1[m-1]==text2[n-1]){
            return(dp[m][n]=1+find(text1,text2,m-1,n-1,dp));
        }
        return(dp[m][n]=max(find(text1,text2,m,n-1,dp),find(text1,text2,m-1,n,dp)));
    }
    int longestCommonSubsequence(string text1, string text2) {
        int m=text1.length();
        int n=text2.length();
        vector<vector<int>>dp(m+1,vector<int>(n+1,-1));
        return(find(text1,text2,m,n,dp));
    }
};