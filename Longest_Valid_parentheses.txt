
# Longest Valid parentheses -> https://leetcode.com/problems/longest-valid-parentheses/
# Eg .Input: s = ")()())"
# Output: 4
# Logic is similar to kadane's. Here use count for checking stability and map for storing indices of counts.
# Increment when you wncounter ( and decrement when you come across ). If count<0, then make it 0 and push it in map as this is not valid. If it is >=0
# then if curr char is ( ,then push count in map and do i-found_ind_of_count.

class Solution {
public:
    int longestValidParentheses(string s) {
        map<int,int>m;
        int ans=0,count=0;
        m[0]=-1;
        for(int i=0;i<s.length();i++){
            if(s[i]=='(')
                count++;
            else
                count--;
            if(count<0){
                count=0;
                m[count]=i;
            }
            else if(count>=0){
                if(s[i]=='('){
                    m[count]=i;
                }
                auto it=m.find(count);
                ans=max(ans,i-it->second);
            }
        }
        return ans;
    }
};
