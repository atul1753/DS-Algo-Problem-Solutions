
# Rat in a Maze
# Path to reach n-1,n-1 from 0,0
# Use Recursion + Backtracking

class Solution{
    public:
    void find(vector<vector<int>>&m,int n,vector<string>&ans,string s,int i,int j,vector<vector<bool>>&vis){
        vis[i][j]=true;
        if(i==n-1 && j==n-1 && m[i][j]==1)
        {
            // cout<<"coming";
            ans.push_back(s);
            return;
        }
        if(i+1<n && m[i+1][j]!=0 && !vis[i+1][j])
        {
            s+='D';
            find(m,n,ans,s,i+1,j,vis);
            s.pop_back();
            vis[i+1][j]=false;
        }
        if(j+1<n && m[i][j+1]!=0 && !vis[i][j+1]){
            s+='R';
            find(m,n,ans,s,i,j+1,vis);
            s.pop_back();
            vis[i][j+1]=false;
        }
        if(i-1>=0 && m[i-1][j]!=0 && !vis[i-1][j]){
            s+='U';
            find(m,n,ans,s,i-1,j,vis);
            s.pop_back();
            vis[i-1][j]=false;
        }
        if(j-1>=0 && m[i][j-1]!=0 && !vis[i][j-1]){
            s+='L';
            find(m,n,ans,s,i,j-1,vis);
            s.pop_back();
            vis[i][j-1]=false;
        }
    }
    vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<string>ans;
        string s;
        vector<vector<bool>>vis(n,vector<bool>(n,false));
        if(m[0][0]==1)
        {
            find(m,n,ans,s,0,0,vis);
            sort(ans.begin(),ans.end());
        }
        return ans;
    }
};
