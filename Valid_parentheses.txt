
# Valid Parentheses -> https://leetcode.com/problems/valid-parentheses/
# Use stacks. push when you come across open bracket, whenever you come acroos a closing bracket, then check for that specific open one at top of stack.

class Solution {
public:
    bool isValid(string s) {
        stack<char>st;
        for(int i=0;i<s.length();i++){
            if(s[i]=='(' || s[i]=='{' || s[i]=='[')
                st.push(s[i]);
            else if(s[i]==')'){
                if(st.empty() || st.top()!='(')
                    return false;
                st.pop();
            }
            else if(s[i]=='}'){
                if(st.empty() || st.top()!='{')
                    return false;
                st.pop();
            }
            else if(s[i]==']'){
                if(st.empty() || st.top()!='[')
                    return false;
                st.pop();
            }
        }
        if(st.empty())
        return true;
        else
            return false;
    }
};