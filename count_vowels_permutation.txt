# Count Vowel Permutations
# This is a dynamic programming problem, start building from strings of length 1, then move ahead
# as we know which vowels will follow which one. One way is to create a 2d array of size nx5.

class Solution {
public:
    int mod = 1000000007;
    long long int find(int i,int vow,vector<vector<long long int>>&dp){
        if(dp[i][vow]!=0)return dp[i][vow]%mod;
        if(i==0)
            dp[i][vow]=1;
        else{
            if(vow==0)
                dp[i][vow]=(find(i-1,1,dp)+find(i-1,2,dp)+find(i-1,4,dp))%mod;
            else if(vow==1)
                dp[i][vow]=(find(i-1,0,dp)+find(i-1,2,dp))%mod;
            else if(vow==2)
                dp[i][vow]=(find(i-1,1,dp)+find(i-1,3,dp))%mod;
            else if(vow==3)
                dp[i][vow]=(find(i-1,2,dp));
            else if(vow==4)
                dp[i][vow]=(find(i-1,2,dp)+find(i-1,3,dp))%mod;
        }
        return dp[i][vow];
    }
    int countVowelPermutation(int n) {
        vector<vector<long long int>>dp(n,vector<long long int>(5,0));
        int res = 0;
        for(int i=0;i<5;i++)
            res+=(find(n-1,i,dp))%mod;
        return res;
    }
};

# It can be done using O(1) space also

class Solution {
public:
    int countVowelPermutation(int n) {
		long a=1,e=1,i=1,o=1,u=1;
		int mod=1e9+7;
		for(int j=2;j<=n;j++){
			long A=(e+u+i)%mod;
			long E=(a+i)%mod;
			long I=(e+o)%mod;
			long O=i%mod;
			long U=(o+i)%mod;
			a=A;
			e=E;
			i=I;
			o=O;
			u=U;
		}
		return (a+e+i+o+u)%mod;
	}
};