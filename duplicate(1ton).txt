#Find duplicate number in array of 1to n
#Methods, XOR approach, sum approach
#negation approach
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int ans;
        for(int i=0;i<nums.size();i++){
            if(nums[abs(nums[i])-1]<0)
            {
                ans=(abs(nums[i]));
                break;
            }
            nums[abs(nums[i])-1]=-(nums[abs(nums[i])-1]);
}
        return ans;
    }
};

#tortoise approach, checking cycle in list and find start of cyccle
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int slow=nums[0];
        int fast=nums[0];
        do{
            slow=nums[slow];
            fast=nums[nums[fast]];
        }
        while(slow!=fast);
        fast=nums[0];
        while(slow!=fast){
            slow=nums[slow];
            fast=nums[fast];
        }
        return slow;
    }
};