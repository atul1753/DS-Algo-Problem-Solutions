
# Minimum Path Sum
# Recursive

class Solution {
public:
    int find(vector<vector<int>>&grid,int m,int n,int i,int j){
        if(i==m || j==n)
            return 101;
        if(i==m-1 && j==n-1)
            return grid[i][j];
        return(grid[i][j]+min(find(grid,m,n,i+1,j),find(grid,m,n,i,j+1)));
    }
    int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        return(find(grid,m,n,0,0));
    }
};

# Memoized

class Solution {
public:
    int find(vector<vector<int>>&grid,int m,int n,int i,int j,vector<vector<int>>&dp){
        if(i>=m || j>=n)
            return INT_MAX;
        if(dp[i][j]!=-1)
            return dp[i][j];
        if(i==m-1 && j==n-1)
            return dp[i][j]=grid[i][j];
        return(dp[i][j]=grid[i][j]+min(find(grid,m,n,i+1,j,dp),find(grid,m,n,i,j+1,dp)));
    }
    int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int>>dp(m,vector<int>(n,-1));
        return(find(grid,m,n,0,0,dp));
    }
};