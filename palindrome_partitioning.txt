
# Palindrome Partitioning
# Recursive -> check for all substrings , if it is palindrome, then push it.

class Solution {
public:
    bool ispali(string s){
        int i=0,j=s.length()-1;
        while(i<j){
            if(s[i]!=s[j])
                return false;
            i++;
            j--;
        }
        return true;
    }
    void find(string s, vector<vector<string>>&ans, vector<string>temp){
        if(s.empty()){
            ans.push_back(temp);
            // temp.clear();
            return;
        }
        for(int i=1;i<=s.length();i++){
            if(ispali(s.substr(0,i))){
                temp.push_back(s.substr(0,i));
                find(s.substr(i,s.length()),ans,temp);
                temp.pop_back();
            }
        }
    }
    vector<vector<string>> partition(string s) {
        vector<vector<string>>ans;
        vector<string>temp;
        find(s,ans,temp);
        return ans;
    }
};
# O(N*2^N)
#To reduce complexity, we can store the ispali results in dp array

class Solution {
public:
    bool ispali(string s){
        int i=0,j=s.length()-1;
        while(i<j){
            if(s[i]!=s[j])
                return false;
            i++;
            j--;
        }
        return true;
    }
    void find(string &s, vector<vector<string>>&ans, vector<string>&temp,vector<vector<bool>>&dp,int start){
        if(start>=s.length()){
            ans.push_back(temp);
            // temp.clear();
            return;
        }
        for(int i=start;i<s.length();i++){
            if(s[start]==s[i] && (i-start<=2 || dp[start+1][i-1])){
                dp[start][i]=true;
                temp.push_back(s.substr(start,i-start+1));
                find(s,ans,temp,dp,i+1);
                temp.pop_back();
            }
        }
    }
    vector<vector<string>> partition(string s) {
        vector<vector<string>>ans;
        vector<string>temp;
        vector<vector<bool>>dp(s.length(),vector<bool>(s.length(),false));
        find(s,ans,temp,dp,0);
        return ans;
    }
};