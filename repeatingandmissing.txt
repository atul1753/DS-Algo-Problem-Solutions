
#find repeating and missing number
#using xor and rightmost setbit

class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int x=0,y=0,s=0;
        for(int i=0;i<nums.size();i++)
            s=s^nums[i];
        for(int i=1;i<=nums.size();i++)
            s=s^i;
        int r=s & (~(s-1));
        for(int i=0;i<nums.size();i++)
        {
            if(r & nums[i])
                x=x^nums[i];
            else
                y=y^nums[i];
        }
        for(int i=1;i<=nums.size();i++)
        {
            if(r & i)
                x=x^i;
            else
                y=y^i;
        }
        for(int i=0;i<nums.size();i++)
            if(nums[i]==x)
                return y;
        return x;
    }
};

#using sum S1=n(n+1)/2,S=sum of array, S2=n(n+1)(2n+1)/6, S3=Sum of squares of array elems;
#a-b=S1-s, a^2-b^2=S2-S3, then solve the equation;
