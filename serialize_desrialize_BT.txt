
# Serialize and Deserialize a binary tree
# level order is used
# Key logic in deserialize is to decrement the number of times null is encountered before that for calculating left and right child. 2*i+1,2*i+2

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        queue<TreeNode *>q;
        q.push(root);
        string s;
        while(!q.empty()){
            TreeNode *temp=q.front();
            if(temp)
            s+=to_string(temp->val);
            if(!temp)
                s+='n';
            s+=",";
            q.pop();
            if(temp){
            q.push(temp->left);
            q.push(temp->right);
                }
        }
        for(int i=0;i<s.length();i++)
            cout<<s[i];
        return s;
    }

    // Decodes your encoded data to tree.
    TreeNode *fill(vector<pair<string,int>>&v,int i,int n){
        if(i>=n || v[i].first=="n")
        return NULL;
        TreeNode *root=new TreeNode(stoi(v[i].first));
        root->left=fill(v,(2*(v[i].second))+1,n);
        root->right=fill(v,(2*(v[i].second))+2,n);
        return root;
    }
    TreeNode* deserialize(string data) {
        vector<pair<string,int>>v1;
        int c=0;
        vector<string>v;
        string t="";
        for(int i=0;i<data.length();i++){
            if(data[i]!=',')
            {
                t+=data[i];
            }
            else
            {
                v.push_back(t);
                t="";
            }
        }
        v.push_back(t);
        for(int i=0;i<v.size();i++){
            if(v[i]=="n"){
                c++;
                v1.push_back(make_pair(v[i],i));
                continue;
            }
            v1.push_back(make_pair(v[i],i-c));
        }
        TreeNode *root=fill(v1,0,data.length());
        return root;
    }
};

// Your Codec object will be instantiated and called as such:
// Codec ser, deser;
// TreeNode* ans = deser.deserialize(ser.serialize(root));