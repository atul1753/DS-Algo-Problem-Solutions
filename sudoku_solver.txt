
# Sudoku Solver -> https://leetcode.com/problems/sudoku-solver/
# Check for each empty elem for 1 to 9 if any is valid, then recursively call again for the whole board, if it returns false then again make it empty.
# Look it as 3 step process-> check for empty-> check for 1 to 9-> if it is valid then again do the same thing. if you have moved from 1 to 9 and all are invalid, then return false 
# from there as this can not be a solution

class Solution {
public:
    bool isvalid(vector<vector<char>>& board,int i,int j,char c){
        for(int k=0;k<9;k++){
            if(board[i][k]==c)
                return false;
            if(board[k][j]==c)
                return false;
            if(board[3*(i/3)+k/3][3*(j/3)+k%3]==c)
                return false;
        }
        return true;
    }
    bool solve(vector<vector<char>>& board){
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                if(board[i][j]=='.'){
                    for(char c='1';c<='9';c++){
                    if(isvalid(board,i,j,c))
                    {
                        board[i][j]=c;
                        if(solve(board))
                            return true;
                        else
                            board[i][j]='.';
                    }
                }
                    return false;
                }
            }
        }
        return true;
    }
    void solveSudoku(vector<vector<char>>& board) {
        solve(board);
    }
};
