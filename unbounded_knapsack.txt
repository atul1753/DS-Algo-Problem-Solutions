
# Unbounded Knapsack -> Knapsack with duplicate items

class Solution{
public:
    int knapsack(int N,int W, int val[],int wt[],vector<vector<int>>&dp){
        if(W<=0 || N<=0)
        return dp[N][W]=0;
        if(dp[N][W]!=-1)
        return dp[N][W];
        if(wt[N-1]>W)
        return(dp[N][W]=knapSack(N-1,W,val,wt));
        return(dp[N][W]=max({val[N-1]+knapSack(N,W-wt[N-1],val,wt),val[N-1]+knapSack(N-1,W-wt[N-1]
        ,val,wt),knapSack(N-1,W,val,wt)}));
    }
    int knapSack(int N, int W, int val[], int wt[])
    {
        vector<vector<int>>dp(N+1,vector<int>(W+1,-1));
        return knapsack(N,W,val,wt,dp);
    }
};